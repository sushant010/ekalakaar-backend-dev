openapi: 3.0.3
info:
  title: eKalakaar API
  description: >-
    Explore the eKalakaar API documentation, a comprehensive guide to the features and functionalities of the eKalakaar platform's APIs. From user registration to authentication and password reset, this document covers the various endpoints that power eKalakaar's creative ecosystem.

    ## Dummy Users -
      ### Patron:
        email: william.wilson@example.com
        password: william123

        email: "emma.davis@example.com
        password: emma456

        email: liam.rodriguez@example.com
        password: liam789

        email: ava.hernandez@example.com
        password: ava000

        email: noah.gonzalez@example.com
        password: noah777
      ### Artist:
        email: emily.anderson@example.com
        password: emily123

        email: michael.johnson@example.com
        password: michael456

        email: sophia.garcia@example.com
        password: sophia789

        email: david.martinez@example.com
        password: david000

        email: olivia.brown@example.com
        password: olivia777
    ### User Avatar/Profile image Upload Info:

    Default user avatar server directory - /images/image-name.ext.

      where, ext can be any image (eg. png, jpg, jpeg etc).

      To retrieve user avatar pass the user.avatar into the following url - 

      eg. user.avatar have value "user-avatar.png"

      `https://api.ekalakaar.com/images/user-avatar.png` with GET request
  version: 1.0.0
  contact: {}
servers:
  - url: "https://api.ekalakaar.com/api/v1"
    description: Production mode
  - url: "http://localhost:4000/api/v1"
    description: Development mode
components:
  schemas:
    ArtistProfileUpdate:
      type: object
      properties:
        personalInfo:
          type: object
          properties:
            about:
              type: string
    PatronProfileUpdate:
      type: object
      properties:
        personalInfo:
          type: object
          properties:
            companyDescription:
              type: string
            companyName:
              type: string
    PostOpportunity:
      type: object
      properties:
        applicationPeriod:
          type: object
          properties:
            end:
              type: string
              format: date
          required:
            - end
        category:
          type: string
        description:
          type: string
        postedBy:
          type: string
        position:
          type: string
        location:
          type: string
        performanceDate:
          type: string
          format: date
        languages:
          type: array
          items:
            type: string
        budget:
          type: number
        timeSlot:
          type: string
          enum:
            - Day
            - Night
        artNature:
          type: string
        expertise:
          type: string
        theme:
          type: string
        performanceType:
          type: string
        performanceDuration:
          type: string
        mediaType:
          type: string
          enum:
            - Live
            - Recorded
        requiredArtists:
          type: integer
        artistLevel:
          type: string
        otherRequirements:
          type: string
        incentives:
          type: array
          items:
            type: string
      required:
        - applicationPeriod
        - category
        - description
        - postedBy
        - position
        - location
        - performanceDate
        - budget
        - timeSlot
        - artNature
        - expertise
        - theme
        - performanceType
        - performanceDuration
        - mediaType
        - requiredArtists
        - artistLevel
    UpdateOpportunity:
      type: object
      properties:
        active:
          type: boolean
        artistLevel:
          type: string
        location:
          type: string
    UpdateApplicationStatus:
      type: object
      properties:
        status:
          type: string
          default: In-Progress
          enum:
            - Applied
            - In-Progress
            - Hired
            - Rejected
          description: The updated status of the application (e.g., Applied, In-Progress, Hired, Rejected).
      required:
        - status
paths:
  /quries/post-query:
    post:
      tags:
        - Query
      summary: Post a new Query
      description: >-
        Use this endpoint to post a new query or contact us form with the provided information.
        The following fields are required:
          - name
          - email
          - phoneNumber
          - message

        The following fields are optional:
          - subject
          - organization
          - link
          - location
          - interestedIn
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                phoneNumber:
                  type: string
                  example: "+1234567890"
                message:
                  type: string
                  example: "This is a message"
                subject:
                  type: string
                  example: Business
      responses:
        "201":
          description: Query postedd successfully
  /auth/register:
    post:
      tags:
        - User Registration
      summary: Register a new user
      description: >-
        Use this endpoint to register a new user with the provided information.
        The following fields are required:
          - firstName
          - lastName
          - email
          - phoneNumber
          - password
          - passwordConfirm
          - role (Choose from: Artist, Patron, Art-lover, Partner)
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                phoneNumber:
                  type: string
                  example: "+1234567890"
                password:
                  type: string
                  format: password
                  example: Password123
                passwordConfirm:
                  type: string
                  format: password
                  example: Password123
                role:
                  type: string
                  example: Artist
                  enum: [Artist, Patron, Art-lover, Partner]
      responses:
        "201":
          description: User registered successfully
  /auth/login:
    post:
      tags:
        - User Authentication
      summary: Login using email and password
      description: >-
        Use this endpoint to log in using the provided email and password.
        The following fields are required:
          - email
          - password
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: Password123
      responses:
        "200":
          description: User logged in successfully

  /auth/send-otp:
    post:
      tags:
        - User Authentication
      summary: Send OTP for login
      description: >-
        Use this endpoint to send an OTP for login using the provided phone number and country code.
        The following fields are required:
          - phoneNumber
          - countryCode
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phoneNumber:
                  type: string
                  example: "+1234567890"
                countryCode:
                  type: string
                  example: "+1"
      responses:
        "200":
          description: OTP sent successfully

  /auth/verify-otp:
    post:
      tags:
        - User Authentication
      summary: Verify OTP for login
      description: >-
        Use this endpoint to verify the OTP for login using the provided OTP, phone number, and country code.
        The following fields are required:
          - otp
          - phoneNumber
          - countryCode
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                  example: "123456"
                phoneNumber:
                  type: string
                  example: "+1234567890"
                countryCode:
                  type: string
                  example: "+1"
      responses:
        "200":
          description: OTP verified successfully

  /auth/google:
    get:
      tags:
        - User Authentication
      summary: Initiate Google login
      description: >-
        Redirect user to this url when user clicks on the **`Login with
        Google`** button.


        This url will render the google concent screen where user can select the
        google account with which he/she wants to login with.
      parameters: []
      responses:
        "200":
          description: Google login initiated successfully

  /auth/google/callback:
    get:
      tags:
        - User Authentication
      summary: Google login callback
      description: >-
        Google will send user details in JSON format once user successfully logs
        in.


        Backend will create an access and refresh token and will redirect user
        to the appropreate frontend url with access token and refresh token in
        the query parameter.
      parameters: []
      responses:
        "200":
          description: Google login callback successful

  /auth/facebook:
    get:
      tags:
        - User Authentication
      summary: Initiate Facebook login
      description: >-
        Redirect user to this url when user clicks on the **`Login with
        facebook`** button.


        This url will render the facebook concent screen where user can select the
        facebook account with which he/she wants to login with.
      parameters: []
      responses:
        "200":
          description: Facebook login initiated successfully

  /auth/facebook/callback:
    get:
      tags:
        - User Authentication
      summary: Facebook login callback
      description: >-
        Facebook will send user details in JSON format once user successfully logs
        in.


        Backend will create an access and refresh token and will redirect user
        to the appropreate frontend url with access token and refresh token in
        the query parameter.
      parameters: []
      responses:
        "200":
          description: Facebook login callback successful
  /auth/refresh-token:
    post:
      tags:
        - User Authentication
      summary: Refresh Access Token
      description: |
        Use this endpoint to refresh the user's access token based on a valid refresh token. If the refresh token is present in browser cookies, it can be automatically retrieved from there.

        When the current access token expires, calling this endpoint with a valid refresh token will provide a new access token and refresh token, ensuring uninterrupted access for the user.

        **Why Use Refresh Tokens:**
        1. Enhanced Security: Refresh tokens offer enhanced security by reducing the need for long-lived access tokens.
        2. Convenience: Users don't need to log in again with their credentials if their access token expires. The refresh token will automatically refresh the access token.

        **Implementation Details:**
        - Conditionally Call the API: Check if the current access token is expired each time the application is opened.
        - If the access token is expired, send the refresh token along with the this API request to obtain a new access token and refresh token.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: "your-refresh-token-here"
      responses:
        200:
          description: Successful token refresh
          schema:
            type: object
            properties:
              accessToken:
                type: string
                example: "new-access-token"
              refreshToken:
                type: string
                example: "new-refresh-token"
        400:
          description: Bad Request
        404:
          description: Not found
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid refresh token"
        401:
          description: Unauthorized
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Authentication failed"
        500:
          description: Internal Server Error
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Server error, please try again later"

  /auth/forgot-password/send-otp:
    post:
      tags:
        - User Password Reset
      summary: Send OTP for password reset
      description: >-
        Use this endpoint to send or re-send an OTP for the password reset process using the provided email.
        The following fields are required:
          - email

        `Note`: Use this same endpoint for re-send the forgot password. Endpoint /resend-otp has beem removed. User will able to request OTP for 5 times per hour.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
      responses:
        "200":
          description: OTP sent successfully for password reset
  /auth/forgot-password/verify-otp:
    post:
      tags:
        - User Password Reset
      summary: Verify OTP for password reset
      description: >-
        Use this endpoint to reset password once OTP is verified.
        The following fields are required:
          - otp
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                  example: "123456"
      responses:
        "200":
          description: Otp Verified successfully
  /auth/forgot-password/reset-password:
    post:
      tags:
        - User Password Reset
      summary: Reset password
      description: >-
        Use this endpoint to reset the password using the provided OTP, new password, and password confirmation.
        The following fields are required:
          - password
          - passwordConfirm
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                  description: The new password for the user's account.
                  example: NewPassword123
                passwordConfirm:
                  type: string
                  format: password
                  description: Confirm the new password.
                  example: NewPassword123
      responses:
        "200":
          description: Password reset successful
  /artists/profile:
    get:
      tags:
        - Artist
      summary: Get the profile of a logged artist
      description: Retrieves the profile information for a logged-in artist.
      responses:
        200:
          description: Artist Profile data fetched successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
    patch:
      tags:
        - Artist
      summary: Update the profile of a logged artist
      description: Allows a logged-in artist to update their profile info.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArtistProfileUpdate"
      responses:
        200:
          description: Artist Profile data updated successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
    delete:
      tags:
        - Artist
      summary: Delete logged in artist account
      description: >-
        Allows a logged-in artist to delete their account.
      responses:
        204:
          description: Artist's account deleted successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /artists/profile/avatar:
    post:
      tags:
        - Artist
      summary: Update an artist's avatar image
      description: >-
        Allows a logged-in artist to upload/update their avatar image.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: file
                  description: Upload image file
      responses:
        200:
          description: Artist avatar updated successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /artists/opportunities:
    get:
      tags:
        - Artist
      summary: Get opportunities for logged artists
      description: >-
        Retrieves a list of opportunities available to logged-in artists.
      responses:
        200:
          description: Opportunities fetched successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /artists/opportunities/{id}:
    get:
      tags:
        - Artist
      summary: Get single opportunity for logged artists
      description: >-
        Retrieves the details of a specific opportunity by its id.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Opportunity fetched successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /artists/applications:
    get:
      tags:
        - Artist
      summary: Get a list of artist's applications
      description: >-
        Retrieves a list of applications submitted by the logged-in artist.
          If the `status` parameter is not specified, it will return applications with the status "Applied" by default.
      parameters:
        - name: status
          in: query
          description: Filter applications by status (Applied, In-Progress, Hired, Rejected).
          schema:
            type: string
            enum: [Applied, In-Progress, Hired, Rejected]
      responses:
        200:
          description: Applications fetched successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /artists/applications/{id}:
    post:
      tags:
        - Artist
      summary: Apply for posted opportunity
      description: >-
        Allows the logged-in artist to apply to a posted opportunity.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                quotedPrice:
                  type: number
                  example: 2000
                answer:
                  type: object
                  example: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
      responses:
        200:
          description: Application created successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /artists/saved-opportunities:
    get:
      tags:
        - Artist
      summary: Get a list of saved opportunities for the logged artist
      description: >-
        Retrieves a list of opportunities that the logged-in artist has saved for future reference.
      responses:
        200:
          description: Saved opportunities fetched successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /artists/saved-opportunities/{id}:
    post:
      tags:
        - Artist
      summary: Save an opportunity for the logged artist
      description: >-
        Saves an opportunity for future reference by the logged-in artist.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Opportunity saved successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
    delete:
      tags:
        - Artist
      summary: Unsave an opportunity for the logged artist
      description: >-
        Un-saves an opportunity for the logged-in artist.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Opportunity unsaved successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /patrons/profile:
    get:
      tags:
        - Patron
      summary: Get the profile of a logged patron
      description: Retrieves the profile information for a logged-in patron.
      responses:
        200:
          description: Patron Profile data fetched successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
    patch:
      tags:
        - Patron
      summary: Update the profile of a logged patron
      description: Allows a logged-in patron to update their profile info.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatronProfileUpdate"
      responses:
        200:
          description: Patron Profile data updated successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
    delete:
      tags:
        - Patron
      summary: Delete logged in artist account
      description: >-
        Allows a logged-in artist to delete their account.
      responses:
        204:
          description: Artist's account deleted successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /patrons/profile/avatar:
    post:
      tags:
        - Patron
      summary: Update an patron's avatar image
      description: >-
        Allows a logged-in patron to upload/update their avatar image.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: file
                  description: Upload image file
      responses:
        200:
          description: Patron avatar updated successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /patrons/opportunities:
    get:
      tags:
        - Patron
      summary: Get opportunities posted by logged-in patron
      description: >-
        Retrieves a list of opportunities posted by the logged-in patron.
      responses:
        200:
          description: Opportunities fetched successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
    post:
      tags:
        - Patron
      summary: Post an opportunity
      description: >-
        Use this endpoint to post an opportunity.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostOpportunity"
      responses:
        200:
          description: Opportunity posted successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /patrons/opportunities/{id}:
    get:
      tags:
        - Patron
      summary: Get single opportunity posted by logged-in patron
      description: >-
        Retrieves the details of a specific opportunity by its id.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Opportunity fetched successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
    patch:
      tags:
        - Patron
      summary: Update an opportunity posted by logged-in patron
      description: >-
        Updates the details of a specific opportunity by its id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOpportunity"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Opportunity updated successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
    delete:
      tags:
        - Patron
      summary: Delete an opportunity posted by logged-in patron
      description: >-
        Deletes the specific opportunity by its id.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Opportunity deleted successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /patrons/opportunities/applications:
    get:
      tags:
        - Patron
      summary: Get applications for opportunities posted by the logged-in patron
      description: >-
        Retrieves applications for opportunities posted by the logged-in patron with optional filters. If `opportunityId` is not provided, it will return all applications belonging to the logged-in patron's posted opportunities.
      parameters:
        - name: opportunityId
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [Applied, In-Progress, Hired, Rejected]
      responses:
        200:
          description: Applications fetched successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /patrons/opportunities/applications/{id}:
    get:
      tags:
        - Patron
      summary: Get details of a specific application
      description: >-
        Retrieves details of a specific application by its id belonging to the logged-in patron's posted opportunities
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Application fetched successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
    patch:
      tags:
        - Patron
      summary: Update the status of a specific application
      description: >-
        Updates the status of a specific application belonging to the logged-in patron's posted opportunities.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateApplicationStatus"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Application updated successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
    delete:
      tags:
        - Patron
      summary: Delete a specific application
      description: >-
        Deletes the a specific application belonging to the logged-in patron's posted opportunities.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Application deleted successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /patrons/artists:
    get:
      tags:
        - Patron
      summary: Get top artists profiles
      description: >-
        Retrieves a list of top artists who have previously applied and been hired for opportunities posted by the logged-in patron.
      responses:
        200:
          description: Artist profiles fetched successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /patrons/artists/{id}:
    get:
      tags:
        - Patron
      summary: Get profile info of single artist
      description: >-
        Retrieves profile info of a single artist by its id.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Artist profile fetched successfully
        400:
          description: Bad request
        404:
          description: Not found
        401:
          description: Unauthorized
        500:
          description: Internal server error
